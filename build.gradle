plugins {
    id 'java'
}

group = 'com.aimitjava'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    // GitHub Packages Repository
    maven {
        url = uri("https://maven.pkg.github.com/RainerBlessing/langchain4j-configuration")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation 'com.aimitjava:config-module:1.1.1'

    implementation 'dev.langchain4j:langchain4j:1.0.0-beta1'
    implementation 'dev.langchain4j:langchain4j-open-ai:1.0.0-beta1'

    // Logging - korrigierte Konfiguration
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.12'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'

    testImplementation 'org.hamcrest:hamcrest:2.1'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.aimitjava.LangChainJavaExample'
    }

    // Include all dependencies in the jar
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Exclude signatures from dependencies
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

// Custom task to run the application
tasks.register('runStuffDocumentsChainExample', JavaExec) {
    group = 'application'
    description = 'Runs the Stuff Documents Chain Example'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.aimitjava.example.StuffDocumentsChainExample'

    // Pass through system properties and environment variables
    systemProperties System.properties
    environment System.getenv()

    // Ensure the OPENAI_API_KEY is available
    doFirst {
        if (!System.getenv('OPENAI_API_KEY')) {
            throw new GradleException("OPENAI_API_KEY environment variable is not set!")
        }
    }
}

layout.buildDirectory = file('build/out')
